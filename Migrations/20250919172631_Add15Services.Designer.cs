// <auto-generated />
using System;
using HotelReservationAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelReservationAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250919172631_Add15Services")]
    partial class Add15Services
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotelReservationAPI.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DPI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Offer", (string)null);
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("HotelReservationAPI.Models.RoomService", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RoomService", (string)null);
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Service", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Conexión de alta velocidad gratuita en todas las habitaciones",
                            Name = "WiFi"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Pantalla plana con cable internacional y streaming",
                            Name = "Televisión"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Estacionamiento privado con seguridad 24 horas",
                            Name = "Parqueo"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Atención personalizada con menú variado disponible las 24 horas",
                            Name = "Servicio al cuarto"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Piscina al aire libre con bar incluido",
                            Name = "Piscina"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Climatización moderna y silenciosa",
                            Name = "Aire acondicionado"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Acceso a spa con sauna, masajes y tratamientos de relajación",
                            Name = "Spa"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Shuttle gratuito desde y hacia el aeropuerto",
                            Name = "Transporte"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Acceso a instalaciones deportivas y fitness",
                            Name = "Gimnasio"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Buffet internacional o desayuno continental",
                            Name = "Desayuno incluido"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Habitaciones aptas para huéspedes con mascotas",
                            Name = "Pet Friendly"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Seguridad adicional con caja fuerte privada",
                            Name = "Caja fuerte"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Bebidas y snacks disponibles en la habitación",
                            Name = "Mini Bar"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Balcón con vistas panorámicas exclusivas",
                            Name = "Balcón privado"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Habitaciones con vista al lago, mar o montaña",
                            Name = "Vista premium"
                        });
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Offer", b =>
                {
                    b.HasOne("HotelReservationAPI.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Reservation", b =>
                {
                    b.HasOne("HotelReservationAPI.Models.Client", null)
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId");

                    b.HasOne("HotelReservationAPI.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Room", b =>
                {
                    b.HasOne("HotelReservationAPI.Models.Branch", "Branch")
                        .WithMany("Rooms")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("HotelReservationAPI.Models.RoomService", b =>
                {
                    b.HasOne("HotelReservationAPI.Models.Room", "Room")
                        .WithMany("RoomServices")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelReservationAPI.Models.Service", "Service")
                        .WithMany("RoomServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Branch", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Client", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Room", b =>
                {
                    b.Navigation("RoomServices");
                });

            modelBuilder.Entity("HotelReservationAPI.Models.Service", b =>
                {
                    b.Navigation("RoomServices");
                });
#pragma warning restore 612, 618
        }
    }
}
